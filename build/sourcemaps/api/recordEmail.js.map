{"version":3,"sources":["api/recordEmail.js"],"names":[],"mappings":";;;;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAE/B,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,IAAI,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACjC,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEhC,MAAM,CAAC,OAAO,GAAG;AACf,KAAG,EAAE,wDAAwD;AAC7D,aAAW,oBAAE,WAAgB,GAAG,EAAE,IAAI,EAAE;;AAEtC,QAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,QAAI,CAAC,KAAK,EAAE;AACV,YAAM,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,4BAA4B,CAAC,CAAC;KAC/D;;AAED,QAAI,MAAM,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACpF,aAAO,CAAC,CAAC,MAAM,CACb,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;;AAEZ;AACE,aAAK,EAAE,KAAK;AACZ,iBAAS,EAAE,CAAC,CAAC,GAAG,EAAE;AAClB,gBAAQ,EAAE,CAAC,CAAC,GAAG,EAAE;AACjB,iBAAS,EAAE,CAAC,EACb;;AAED,SAAG,CAAC,KAAK,CAAC;AACR,gBAAQ,EAAE,CAAC,CAAC,GAAG,EAAE;AACjB,iBAAS,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,WAAQ,CAAC,CAAC,CAAC,EAC9C,CAAC,CAAC,CAAC;KACL,CAAC,CAAC;;;AAGL,SAAK,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AACzD,SAAG,CAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAC;KAChD,EAAE,UAAC,GAAG,EAAK;AACV,SAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;KACxD,CAAC,CAAC;;AAEH,WAAO,IAAI,CAAC;GACb,CAAA;CACF,CAAC","file":"api/recordEmail.js","sourcesContent":["var _ = require('lodash-node');\n\nvar ApiError = require('./ApiError');\nvar log = require('../log');\nvar r = require('../database/r');\nvar slack = require('../slack');\n\nmodule.exports = {\n  doc: \"Records that an e-mail address is in use in the system\",\n  methodAsync: async function (env, args) {\n\n    var email = args[0];\n    if (!email) {\n      throw ApiError('BAD_ARGS', env, \"`email` parameter required\");\n    }\n\n    var result = await r.db('exp_host').table('emails').get(email).replace(function (row) {\n      return r.branch(\n        row.eq(null),\n        // Insert\n        {\n          email: email,\n          firstSeen: r.now(),\n          lastSeen: r.now(),\n          timesSeen: 1,\n        },\n        // Update\n        row.merge({\n          lastSeen: r.now(),\n          timesSeen: row('timesSeen').add(1).default(1),\n        }));\n      });\n\n    // Send an invite to the Slack Instance to them\n    slack.sendSlackInstanceInviteAsync(email).then((result) => {\n      log(\"Invited\", email, \"to the Slack Instance\");\n    }, (err) => {\n      log.error(\"Failed to invite\", email, \"to Slack:\", err);\n    });\n\n    return true;\n  }\n};\n"],"sourceRoot":"/source/"}