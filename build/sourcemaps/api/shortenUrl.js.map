{"version":3,"sources":["api/shortenUrl.js"],"names":[],"mappings":";;;;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACjC,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAEvC,IAAI,QAAQ,GAAG,4BAA4B,CAAC;;AAE5C,MAAM,CAAC,OAAO,GAAG;AACf,KAAG,EAAE,0CAA0C;AAC/C,aAAW,oBAAE,WAAgB,GAAG,EAAE,IAAI,EAAE;AACtC,QAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;;AAGnB,QAAI,MAAM,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;AAChE,SAAG,EAAH,GAAG,EACJ,CAAC,CAAC;;;AAGH,QAAI,IAAI,CAAC;AACT,QAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACrB,UAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;KACvB,MAAM;;;AAGL,UAAI,MAAM,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAClD,GAAG,CAAC,eAAe,CAAC,CACpB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CACvD;AACH,UAAI,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;;AAEpC,UAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzB,YAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;AACnD,YAAI,EAAJ,IAAI;AACJ,SAAC,EAAD,CAAC;AACD,mBAAW,EAAE,CAAC,CAAC,GAAG,EAAE;AACpB,WAAG,EAAH,GAAG;AACH,UAAE,EAAE,GAAG,CAAC,EAAE,EACX,CAAC,CAAC;KACJ;;AAED,WAAO;AACL,UAAI,EAAJ,IAAI;AACJ,aAAO,EAAE,GAAG;AACZ,cAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EACnC,CAAC;GAEH,CAAA;CACF,CAAC","file":"api/shortenUrl.js","sourcesContent":["var _ = require('lodash-node');\nvar bases = require('bases');\n\nvar ApiError = require('./ApiError');\nvar log = require('../log');\nvar password = require('../password');\nvar r = require('../database/r');\nvar shortUrl = require('../shortUrl');\nvar username_ = require('../username');\n\nvar ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\nmodule.exports = {\n  doc: \"Shortens any URL and returns a short URL\",\n  methodAsync: async function (env, args) {\n    var url = args.url;\n\n    // First lookup the URL in the database\n    var result = await r.db('exp_host').table('shortenedUrls').filter({\n      url,\n    });\n\n    // If the URL already exists, return it\n    var code;\n    if (result.length > 0) {\n      code = result[0].code;\n    } else {\n\n      // Increment the counter\n      var result = await r.db('exp_host').table('counters')\n        .get('shortenedUrls')\n        .update({ n: r.row('n').add(1) }, {returnChanges: true})\n        ;\n      var n = result.changes[0].new_val.n;\n\n      code = bases.toBase26(n);\n      await r.db('exp_host').table('shortenedUrls').insert({\n        code,\n        n,\n        createdTime: r.now(),\n        url,\n        ip: env.ip,\n      });\n    }\n\n    return {\n      code,\n      longUrl: url,\n      shortUrl: shortUrl.codeToUrl(code),\n    };\n\n  }\n};\n"],"sourceRoot":"/source/"}