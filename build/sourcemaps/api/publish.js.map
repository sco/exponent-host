{"version":3,"sources":["api/publish.js"],"names":[],"mappings":";;;;AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACzC,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;AAEjC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACjC,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEhC,MAAM,CAAC,OAAO,GAAG;AACf,KAAG,EAAE,mCAAmC;AACxC,aAAW,oBAAE,WAAgB,GAAG,EAAE,IAAI,EAAE;;;AAGtC,QAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QAGjB,QAAQ,GAQN,IAAI,CARN,QAAQ;QACR,cAAc,GAOZ,IAAI,CAPN,cAAc;QACd,gBAAgB,GAMd,IAAI,CANN,gBAAgB;QAChB,cAAc,GAKZ,IAAI,CALN,cAAc;QACd,cAAc,GAIZ,IAAI,CAJN,cAAc;QACd,iBAAiB,GAGf,IAAI,CAHN,iBAAiB;QACjB,qBAAqB,GAEnB,IAAI,CAFN,qBAAqB;QACrB,QAAQ,GACN,IAAI,CADN,QAAQ;;AAGV,QAAI,eAAe,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,iBAAiB,CAAC;;AAErE,WAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC9D,QAAI,QAAQ,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAEnD,QAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AACzB,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;;;AAGxB,QAAI,MAAM,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC;AACpE,wBAAkB,EAAE,QAAQ;AAC5B,qBAAe,EAAE,cAAc;AAC/B,iBAAW,EAAE,iBAAiB;AAC9B,cAAQ,EAAE,eAAe;AACzB,mBAAa,EAAE,CAAC,CAAC,GAAG,EAAE;AACtB,aAAO,EAAE,cAAc;AACvB,cAAQ,EAAE,IAAI;AACd,UAAI,EAAE,IAAI,EACX,CAAC,CAAC;;AAEH,QAAI,MAAM,GAAG,iBAAiB,GAAG,eAAe,CAAC;;;AAGjD,QAAI,WAAW,GAAG,kCAAkC,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAClF,SAAK,CAAC,4BAA4B,CAAC;AACjC,gBAAU,EAAE,QAAQ;AACpB,cAAQ,EAAE,UAAU;AACpB,aAAO,EAAE,cAAc;AACvB,UAAI,EAAE,GAAG,GAAG,QAAQ,GAAG,8BAA8B,GAAG,eAAe,GAAG,GAAG,GAAG,cAAc,GAAG,IAAI,GAAG,MAAM,GAAG,IAAI,GAAG,WAAW,EACpI,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,aAAO,CAAA;KACR,EAAE,UAAC,GAAG,EAAK;AACV,aAAO,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACjE,CAAC,CAAC;;AAEH,WAAO,EAAC,GAAG,EAAE,IAAI,EAAE,eAAe,EAAf,eAAe,EAAE,IAAI,EAAJ,IAAI,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC;GACnD,CAAA,EACF,CAAC","file":"api/publish.js","sourcesContent":["var instapromise = require('instapromise');\nvar md5hex = require('@exponent/md5hex');\nvar request = require('request');\n\nvar ApiError = require('./ApiError');\nvar config = require('../config');\nvar r = require('../database/r');\nvar slack = require('../slack');\n\nmodule.exports = {\n  doc: \"Publishes a a package to exp.host\",\n  methodAsync: async function (env, args) {\n    // TODO: Validate args\n\n    var opts = args[0];\n\n    var {\n      username,\n      hashedPassword,\n      localPackageName,\n      packageVersion,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      ngrokUrl,\n    } = opts;\n\n    var packageFullName = '@' + remoteUsername + '/' + remotePackageName;\n\n    console.log(\"Saving\", packageFullName, \"from\", ngrokUrl, \".\");\n    var response = await request.promise.get(ngrokUrl);\n\n    var body = response.body;\n    var hash = md5hex(body);\n\n    // TODO: Verify that you can actually publish this\n    var result = await r.db(\"exp_host\").table(\"publishedPackages\").insert({\n      publishingUsername: username, // TODO: Change to be the username from the API\n      packageUsername: remoteUsername,\n      packageName: remotePackageName,\n      fullName: packageFullName,\n      publishedTime: r.now(),\n      version: packageVersion,\n      contents: body,\n      hash: hash,\n    });\n\n    var expUrl = 'exp://exp.host/' + packageFullName;\n\n    // Don't `await` this since we don't want it to block responding from the API\n    var appetizeUrl = 'http://exp.host/--/appetize?url=' + encodeURIComponent(expUrl);\n    slack.sendSlackWebhookMessageAsync({\n      icon_emoji: ':fire:',\n      username: 'exp.host',\n      channel: '#offthepress',\n      text: \"@\" + username + \" just published the package \" + packageFullName + \"@\" + packageVersion + \"\\n\" + expUrl + \"\\n\" + appetizeUrl,\n    }).then(() => {\n      console\n    }, (err) => {\n      console.error(\"Failed to send Slack message about new package\");\n    });\n\n    return {err: null, packageFullName, hash, expUrl};\n  },\n};\n"],"sourceRoot":"/source/"}